package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"
	"log"
	database "src/db"
	graph "src/graph/generated"
	"src/graph/model"

	"github.com/google/uuid"
)

// CreateBaseModel is the resolver for the createBaseModel field.
func (r *mutationResolver) CreateBaseModel(ctx context.Context, input *model.BaseModelInput) (*model.BaseModel, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	newUUID := uuid.New().String() // Generate a new UUID

	baseModel := model.BaseModel{}

	baseModel.ID = &newUUID
	baseModel.CreatedAt = input.CreatedAt
	baseModel.UpdatedAt = input.UpdatedAt

	db.Create(&baseModel)

	return &baseModel, nil
}

// CreateCampaign is the resolver for the createCampaign field.
func (r *mutationResolver) CreateCampaign(ctx context.Context, input *model.CampaignInput) (*model.Campaign, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	fmt.Println("input", input.BeginDate, input.Name, input.UserID)

	newUUID := uuid.New().String() // Generate a new UUID

	campaign := model.Campaign{}

	campaign.ID = &newUUID
	campaign.BeginDate = input.BeginDate
	campaign.Name = input.Name
	campaign.UserID = input.UserID

	db.Create(&campaign)

	return &campaign, nil
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input *model.EventInput) (*model.Event, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	newUUID := uuid.New().String() // Generate a new UUID

	event := model.Event{}

	event.ID = &newUUID
	event.CampaignID = input.CampaignID
	event.Description = input.Description
	event.LocationID = input.LocationID
	event.ProjectID = input.ProjectID
	event.Title = input.Title
	event.StartTime = input.StartTime

	db.Create(&event)

	return &event, nil
}

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, input *model.LocationInput) (*model.Location, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	newUUID := uuid.New().String() // Generate a new UUID

	location := model.Location{}

	location.ID = &newUUID
	location.Title = input.Title
	location.Description = input.Description
	location.StartTime = input.StartTime
	location.EndTime = input.EndTime
	location.Street = input.Street

	db.Create(&location)

	return &location, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input *model.ProjectInput) (*model.Project, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	newUUID := uuid.New().String() // Generate a new UUID

	project := model.Project{}

	project.ID = &newUUID
	project.Name = input.Name
	project.BeginDate = input.BeginDate
	project.UserID = input.UserID

	db.Create(&project)

	return &project, nil
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input *model.TaskInput) (*model.Task, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	newUUID := uuid.New().String() // Generate a new UUID

	task := model.Task{}

	task.ID = &newUUID
	task.Name = input.Name
	task.Date = input.Date
	task.Taken = input.Taken
	task.EventID = input.EventID

	db.Create(&task)

	return &task, nil
}

// CreateTaskAssignment is the resolver for the createTaskAssignment field.
func (r *mutationResolver) CreateTaskAssignment(ctx context.Context, input *model.TaskAssignmentInput) (*model.TaskAssignment, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	newUUID := uuid.New().String() // Generate a new UUID

	task_assignment := model.TaskAssignment{}

	task_assignment.ID = &newUUID
	task_assignment.TaskID = input.TaskID
	task_assignment.UserID = input.UserID

	db.Create(&task_assignment)

	return &task_assignment, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.UserInput) (*model.User, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	newUUID := uuid.New().String() // Generate a new UUID

	user := model.User{}

	user.ID = &newUUID
	user.FirstName = input.FirstName
	user.LastName = input.LastName
	user.Email = input.Email
	user.Phone = input.Phone

	db.Create(&user)

	return &user, nil
}

// UpdateBaseModel is the resolver for the updateBaseModel field.
func (r *mutationResolver) UpdateBaseModel(ctx context.Context, input *model.BaseModelInput) (*model.BaseModel, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	baseModel := model.BaseModel{}
	db.First(&baseModel, input.ID)

	baseModel.ID = input.ID
	baseModel.CreatedAt = input.CreatedAt
	baseModel.UpdatedAt = input.UpdatedAt

	db.Save(&baseModel)
	return &baseModel, nil
}

// UpdateCampaign is the resolver for the updateCampaign field.
func (r *mutationResolver) UpdateCampaign(ctx context.Context, input *model.CampaignInput) (*model.Campaign, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	campaign := model.Campaign{}
	db.First(&campaign, input.ID)

	campaign.ID = input.ID
	campaign.BeginDate = input.BeginDate
	campaign.Name = input.Name
	campaign.UserID = input.UserID

	db.Save(&campaign)
	return &campaign, nil
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, input *model.EventInput) (*model.Event, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	event := model.Event{}
	db.First(&event, input.ID)

	event.ID = input.ID
	event.CampaignID = input.CampaignID
	event.Description = input.Description
	event.LocationID = input.LocationID
	event.ProjectID = input.ProjectID
	event.Title = input.Title
	event.StartTime = input.StartTime

	db.Save(&event)
	return &event, nil
}

// UpdateLocation is the resolver for the updateLocation field.
func (r *mutationResolver) UpdateLocation(ctx context.Context, input *model.LocationInput) (*model.Location, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	location := model.Location{}
	db.First(&location, input.ID)

	location.ID = input.ID
	location.Title = input.Title
	location.Description = input.Description
	location.StartTime = input.StartTime
	location.EndTime = input.EndTime
	location.Street = input.Street

	db.Save(&location)
	return &location, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, input *model.ProjectInput) (*model.Project, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	project := model.Project{}
	db.First(&project, input.ID)

	project.ID = input.ID
	project.Name = input.Name
	project.BeginDate = input.BeginDate
	project.UserID = input.UserID

	db.Save(&project)
	return &project, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input *model.TaskInput) (*model.Task, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	task := model.Task{}
	db.First(&task, input.ID)

	task.ID = input.ID
	task.Name = input.Name
	task.Date = input.Date
	task.Taken = input.Taken
	task.EventID = input.EventID

	db.Save(&task)
	return &task, nil
}

// UpdateTaskAssignment is the resolver for the updateTaskAssignment field.
func (r *mutationResolver) UpdateTaskAssignment(ctx context.Context, input *model.TaskAssignmentInput) (*model.TaskAssignment, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	task_assignment := model.TaskAssignment{}
	db.First(&task_assignment, input.ID)

	task_assignment.ID = input.ID
	task_assignment.TaskID = input.TaskID
	task_assignment.UserID = input.UserID

	db.Save(&task_assignment)
	return &task_assignment, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input *model.UserInput) (*model.User, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	user := model.User{}
	db.First(&user, input.ID)

	user.ID = input.ID
	user.FirstName = input.FirstName
	user.LastName = input.LastName
	user.Email = input.Email
	user.Phone = input.Phone

	db.Save(&user)
	return &user, nil
}

// DeleteBaseModel is the resolver for the deleteBaseModel field.
func (r *mutationResolver) DeleteBaseModel(ctx context.Context, id *string) (*int, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	baseModel := model.BaseModel{}

	db.First(&baseModel, "id = ?", id)

	if baseModel.ID == nil {
		return nil, fmt.Errorf("baseModel not found")
	}
	db.Delete(&baseModel)

	is_deleted := 1

	return &is_deleted, nil
}

// DeleteCampaign is the resolver for the deleteCampaign field.
func (r *mutationResolver) DeleteCampaign(ctx context.Context, id *string) (*int, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	campaign := model.Campaign{}

	db.First(&campaign, "id = ?", id)

	print("deleted,", id)
	print("deleted,", campaign.ID)

	if campaign.ID == nil {
		return nil, fmt.Errorf("campaign not found")
	}
	db.Delete(&campaign)

	is_deleted := 1

	return &is_deleted, nil
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id *string) (*int, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	event := model.Event{}

	db.First(&event, "id = ?", id)

	if event.ID == nil {
		return nil, fmt.Errorf("event not found")
	}
	db.Delete(&event)

	is_deleted := 1

	return &is_deleted, nil
}

// DeleteLocation is the resolver for the deleteLocation field.
func (r *mutationResolver) DeleteLocation(ctx context.Context, id *string) (*int, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	location := model.Location{}

	db.First(&location, "id = ?", id)

	if location.ID == nil {
		return nil, fmt.Errorf("location not found")
	}
	db.Delete(&location)

	is_deleted := 1

	return &is_deleted, nil
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id *string) (*int, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	project := model.Project{}

	db.First(&project, "id = ?", id)

	if project.ID == nil {
		return nil, fmt.Errorf("project not found")
	}
	db.Delete(&project)

	is_deleted := 1

	return &is_deleted, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id *string) (*int, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	task := model.Task{}

	db.First(&task, "id = ?", id)

	if task.ID == nil {
		return nil, fmt.Errorf("task not found")
	}
	db.Delete(&task)

	is_deleted := 1

	return &is_deleted, nil
}

// DeleteTaskAssignment is the resolver for the deleteTaskAssignment field.
func (r *mutationResolver) DeleteTaskAssignment(ctx context.Context, id *string) (*int, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	task_assignment := model.TaskAssignment{}

	db.First(&task_assignment, "id = ?", id)

	if task_assignment.ID == nil {
		return nil, fmt.Errorf("baseModel not found")
	}
	db.Delete(&task_assignment)

	is_deleted := 1

	return &is_deleted, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id *string) (*int, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	user := model.User{}

	db.First(&user, "id = ?", id)

	if user.ID == nil {
		return nil, fmt.Errorf("baseModel not found")
	}
	db.Delete(&user)

	is_deleted := 1

	return &is_deleted, nil
}

// GetBaseModels is the resolver for the getBaseModels field.
func (r *queryResolver) GetBaseModels(ctx context.Context) ([]*model.BaseModel, error) {
	// panic(fmt.Errorf("not implemented: GetBaseModels - getBaseModels"))
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	db.Find(&r.baseModels)
	return r.baseModels, nil
}

// GetCampaigns is the resolver for the getCampaigns field.
func (r *queryResolver) GetCampaigns(ctx context.Context) ([]*model.Campaign, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	db.Preload("Events").Find(&r.campaigns)

	// db.Find(&r.campaigns)

	// for _, campaign := range r.campaigns {
	// 	var events []*model.Event
	// 	db.Where(&model.Event{CampaignID: campaign.ID}).Find(&events)
	// 	campaign.Events = events
	// }

	return r.campaigns, nil
}

// GetEvents is the resolver for the getEvents field.
func (r *queryResolver) GetEvents(ctx context.Context) ([]*model.Event, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	db.Preload("Tasks").Find(&r.events)

	return r.events, nil
}

// GetLocations is the resolver for the getLocations field.
func (r *queryResolver) GetLocations(ctx context.Context) ([]*model.Location, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	db.Find(&r.locations)
	return r.locations, nil
}

// GetProjects is the resolver for the getProjects field.
func (r *queryResolver) GetProjects(ctx context.Context) ([]*model.Project, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	db.Preload("Events").Find(&r.projects)

	return r.projects, nil
}

// GetTasks is the resolver for the getTasks field.
func (r *queryResolver) GetTasks(ctx context.Context) ([]*model.Task, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	db.Preload("TaskAssignments").Find(&r.tasks)

	return r.tasks, nil
}

// GetTaskAssignment is the resolver for the getTaskAssignment field.
func (r *queryResolver) GetTaskAssignment(ctx context.Context) ([]*model.TaskAssignment, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	db.Preload("Users").Preload("Tasks").Find(&r.task_assignments)

	// db.Find(&r.task_assignments)
	// for _, task_assignment := range r.task_assignments {
	// 	var users *model.User
	// 	var tasks *model.Task

	// 	db.Where(&model.User{ID: task_assignment.UserID}).Find(&r.users)
	// 	task_assignment.User = users

	// 	db.Where(&model.Task{ID: task_assignment.TaskID}).Find(&r.tasks)
	// 	task_assignment.Task = tasks
	// }

	return r.task_assignments, nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}

	db.Preload("Campaigns").Preload("Projects").Find(&r.users)

	return r.users, nil
}

// GetBaseModelByID is the resolver for the getBaseModelById field.
func (r *queryResolver) GetBaseModelByID(ctx context.Context, id *string) (*model.BaseModel, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	baseModel := model.BaseModel{}

	db.First(&baseModel, "id = ?", id)

	if baseModel.ID == nil {
		return nil, fmt.Errorf("base model not found")
	}

	return &baseModel, nil
}

// GetCampaignByID is the resolver for the getCampaignById field.
func (r *queryResolver) GetCampaignByID(ctx context.Context, id *string) (*model.Campaign, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	campaign := model.Campaign{}

	db.Preload("Events").First(&campaign, "id = ?", id)

	// db.First(&campaign, "id = ?", id)

	// if campaign.ID == nil {
	// 	return nil, fmt.Errorf("campaign not found")
	// }

	// var events []*model.Event
	// db.Where(&model.Event{CampaignID: campaign.ID}).Find(&events)
	// campaign.Events = events

	return &campaign, nil
}

// GetEventByID is the resolver for the getEventById field.
func (r *queryResolver) GetEventByID(ctx context.Context, id *string) (*model.Event, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	event := model.Event{}

	db.Preload("Tasks").First(&event, "id = ?", id)

	if event.ID == nil {
		return nil, fmt.Errorf("event not found")
	}

	return &event, nil
}

// GetLocationByID is the resolver for the getLocationById field.
func (r *queryResolver) GetLocationByID(ctx context.Context, id *string) (*model.Location, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	location := model.Location{}

	db.First(&location, "id = ?", id)

	if location.ID == nil {
		return nil, fmt.Errorf("location not found")
	}

	return &location, nil
}

// GetProjectByID is the resolver for the getProjectById field.
func (r *queryResolver) GetProjectByID(ctx context.Context, id *string) (*model.Project, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	project := model.Project{}

	db.Preload("Events").First(&project, "id = ?", id)

	if project.ID == nil {
		return nil, fmt.Errorf("project not found")
	}

	return &project, nil
}

// GetTaskByID is the resolver for the getTaskById field.
func (r *queryResolver) GetTaskByID(ctx context.Context, id *string) (*model.Task, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	task := model.Task{}

	db.Preload("TaskAssignments").First(&task, "id = ?", id)

	if task.ID == nil {
		return nil, fmt.Errorf("task not found")
	}

	return &task, nil
}

// GetTaskAssignmentByID is the resolver for the getTaskAssignmentById field.
func (r *queryResolver) GetTaskAssignmentByID(ctx context.Context, id *string) (*model.TaskAssignment, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	task_assignment := model.TaskAssignment{}

	db.Preload("Users").Preload("Tasks").First(&task_assignment, "id = ?", id)

	if task_assignment.ID == nil {
		return nil, fmt.Errorf("task assignment not found")
	}

	return &task_assignment, nil
}

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id *string) (*model.User, error) {
	db, err := database.ConnectDatabase()
	if err != nil {
		log.Println("Unable to connect to database", err)
		return nil, err
	}
	user := model.User{}

	db.Preload("Campaigns").Preload("Projects").First(&user, "id = ?", id)

	if user.ID == nil {
		return nil, fmt.Errorf("user not found")
	}

	return &user, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
